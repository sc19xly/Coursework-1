
#ifndef BOOK_MANAGEMENT_GUARD__H 
#define BOOK_MANAGEMENT_GUARD__H

#include <stdlib.h>
#include<math.h>
#include <string.h>
#include <stdio.h>

/*You can extend the structs (Book and BookArray) defined in this head file;
  However, you may not change the function prototypes. 
  You are also free to add additional head files and data structures as needed. 
*/


typedef struct _Book {
	    unsigned int id; //Book ID
		char bookname[100];
		char *title; //book title
		char author[100];
		char *authors; //comma separated list of authors
		unsigned int year; // year of publication
		unsigned int copies; //number of copies the library has
		int total;
	struct _Book*next;
}Book;

typedef struct _BookArray {
	 Book* array; // pointer to array (or linked list) of struct Book.
	 unsigned int length; // number of elements in the (Book*) array 
}BookArray;

extern Book *bookhead;
extern Book *bookend;
unsigned int usernum,managernum,booknum;

extern char  *ask_question(const char *question);//used to check if the input of choices is valied
void start();
void readuserfile();// load the user file
void readmanagerfile();//load the manager file

//saves the database of books in the specified file
//returns 0 if books were stored correctly, or an error code otherwise
void store_books(Book *p);
	

//loads the database of books from the specified file
//the file must have been generated by a previous call to store_books()
//returns 0 if books were loaded correctly, or an error code otherwise
void load_books();
//adds a book to the ones available to the library
//returns 0 if the book could be added, or an error code otherwise
void add_book();
//removes a book from the library
//returns 0 if the book could be successfully removed, or an error code otherwise.
void remove_book();

//finds books with a given title.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the 
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
void find_book_by_title (const char *title);

//finds books with the given authors.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the 
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
void find_book_by_author (const char *author);

//finds books published in the given year.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the 
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
void find_book_by_year (unsigned int year);
                         

#endif
